{
  "name": "couch-pwd",
  "version": "0.0.1",
  "description": "CouchDB salt and password generation with PBKDF2",
  "main": "index.js",
  "scripts": {
    "test": "mocha --require should --reporter spec"
  },
  "keywords": [
    "couch",
    "couchdb",
    "password",
    "pwd",
    "pbkdf2"
  ],
  "author": {
    "name": "Mirco Zeiss",
    "email": "mirco.zeiss@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zeMirco/couch-pwd"
  },
  "license": "MIT",
  "devDependencies": {
    "should": "~3.3.0",
    "mocha": "~1.18.2",
    "nano": "~5.7.1"
  },
  "readme": "\n# couch-pwd\n\n[![Build Status](https://travis-ci.org/zeMirco/couch-pwd.svg?branch=master)](https://travis-ci.org/zeMirco/couch-pwd)\n\nHash and compare passwords with the crypto's pbkdf2.\nHeavily inspired by [node-pwd](https://github.com/visionmedia/node-pwd).\n\nUses the following values as defaults\n\n- iterations = 10\n- keylen = 20\n- size = 16\n- encoding = 'hex'\n\nThe resulting salt and password Strings are the same you'd get when you save a\nuser to CouchDB and let CouchDB do all the hashing for you.\n\nModule has two goals\n\n- verify user passwords without making requests to `/_session` API\n- use the same hashing algorithm for other databases\n\n# Installation\n\n```bash\nnpm install couch-pwd\n```\n\n# Example\n\nOn signup generate a salt / password hash, and save it somewhere:\n\n```js\nvar pwd = require('couch-pwd');\npwd.hash('my password', function(err, salt, hash){\n  user.salt = salt;\n  user.hash = hash;\n})\n```\n\nTo authenticate load and compare:\n\n```js\nvar pwd = require('couch-pwd');\npwd.hash('submitted password', user.salt, function(err, hash){\n  if (user.hash == hash) {\n    // yay\n  }\n})\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zeMirco/couch-pwd/issues"
  },
  "homepage": "https://github.com/zeMirco/couch-pwd",
  "_id": "couch-pwd@0.0.1",
  "_from": "couch-pwd@"
}
